@page "/SampleData"
@inject IStatusData statusData
@inject ICategoryData categoryData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>SampleData</h3>

@if (categoriesCreated)
{
	<h4>Categories have been created</h4>
}
else
{
	<button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
	<h4>Statuses have been created</h4>
}
else
{
	<button class="btn btn-secondary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>



@code {
	private bool categoriesCreated = false;
	private bool statusesCreated = false;

	private async Task GenerateSampleData()
	{
		UserModel user = new()
			{
				FirstName = "Viren",
				LastName = "Patel",
				EmailAddress = "viren_test@gmail.com",
				DisplayName = "SamplePatel",
				ObjectIdentifier = "abc-123"
			};

		await userData.CreateUser(user);

		var auth_user = await userData.GetUserFromAuthentication("abc-123");

		var categories = await categoryData.GetAllCategories();

		var statuses = await statusData.GetAllStatuses();

		HashSet<string> votes = new();
		votes.Add("1");
		votes.Add("2");
		votes.Add("3");

		SuggestionModel suggestion = new()
			{
				Author = new BasicUserModel(auth_user),
				Category = categories[0],
				Suggestion = "Our first suggestion",
				Description = "This is suggestion created by the sample data generation method."
			};

		await suggestionData.CreateSuggestion(suggestion);

		suggestion = new()
			{
				Author = new BasicUserModel(auth_user),
				Category = categories[1],
				Suggestion = "Our Second suggestion",
				Description = "This is suggestion created by the sample data generation method.",
				SuggestionStatus = statuses[1],
				AdminNotes = "This is note for the status"
			};

		await suggestionData.CreateSuggestion(suggestion);


		suggestion = new()
			{
				Author = new BasicUserModel(auth_user),
				Category = categories[2],
				Suggestion = "Our Third suggestion",
				Description = "This is suggestion created by the sample data generation method.",
				SuggestionStatus = statuses[2],
				UserVotes = votes,
				AdminNotes = "This is note for the status"
			};

		await suggestionData.CreateSuggestion(suggestion);

		votes.Add("4");


	}

	private async Task CreateCategories()
	{
		var categories = await categoryData.GetAllCategories();

		if (categories?.Count < 0)
		{
			return;
		}

		CategoryModel cat = new()
			{
				CategoryName = "Courses",
				CategoryDescription = "Full paid courses"
			};

		await categoryData.CreateCategory(cat);

		cat = new()
			{
				CategoryName = "Dev Questions",
				CategoryDescription = "Advice on being a developer"
			};

		await categoryData.CreateCategory(cat);

		cat = new()
			{
				CategoryName = "In-Depth Tutorial",
				CategoryDescription = "A deep-dive video on how to use a topic."
			};

		await categoryData.CreateCategory(cat);

		categoriesCreated = true;

	}

	private async Task CreateStatuses()
	{
		var statuses = await statusData.GetAllStatuses();

		if (statuses?.Count > 0)
		{
			return;
		}

		StatusModel status = new()
			{
				StatusName = "Watching",
				StatusDescription = "The suggestion is watched."
			};

		await statusData.CreateStatus(status);
		status = new()
			{
				StatusName = "Upcomming",
				StatusDescription = "Suggestion Accepted and will be released soon."
			};

		await statusData.CreateStatus(status);

		status = new()
			{
				StatusName = "Dismissed",
				StatusDescription = "The suggestion was not something that we are going to undertake."
			};

		await statusData.CreateStatus(status);

		statusesCreated = true;

	}

}
